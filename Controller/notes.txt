Areas of interest:

Priority to Power and Transciever.

Power
	Antenna (how do we create a high power signal?)
	Microcontroller
	Power Meter?
	
Transciever (how does it work)
	    Can we receive?

Joysticks
	Which ones, how to do they operate?
	How does the computer interface?
	    FTDI, or serial?
	    I2C?
	    All?
	    
	
Display (optional)
	Breakout pins


Questions
    - How do we isolate the transmitter noise from the uC supply? 
    - What is the meaning of a JUMP capacitor?
    - Need Device footprints for crystals

Notes from Week 1:
    - Current Open Questions
         - How does the Zigbee protocol operate? How are channels separated?
	 - What voltage can the antenna operate at? Do we need an amplifier (probably)? Do we need impedance matching if we use an amplifier?
	 - If we want to attach a separate controller, is it better to use serial, or USB? Bluetooth (there are 2 RX and 2 TX pins)

This week I spent time building a bill of materials for the ATMEGA128RFA1 development board from sparkfun and understanding all of the parts of the board. At this point, the most complicated part of the controller seems to be the transmit & recieve functions. I think it would be fun to integrate a more powerful transmitter/antenna but this may require a more substantial power supply, an amplifier, and different analog electronics. I need to look into this more.

Otherwise I have considered putting TWO antennas on the device, one standard antenna (like the current board) and another antenna pinout for long distance communication.

For USB consider looking at the Arduino or other schematics.

The unoccupied pinout may be for a lipo battery
    

Week 2

The microcontroller has a battery monitor. We should use this

Tuesday 10/14/2014
Yesterday I found a decent RF front end for the RF/Antenna subsystem in the controller. I chose it partly because we can get free samples from TI, but also because it seemed to be the highest gain RF front end I could find for the 2.4Ghz frequency spectrum. 

Today, I spent my time learning how to create a symbol and footprint in Eagle. Similar parts existed, but it seems that most of them did not match for some reason or another, or were completely wrong. When I finished the symbol (I still need to check the footprint) I started the schematic for my board. 

For my board, I have chosen to provide interfaces for Serial (the programmer), I2C, and 8 analog pins (plus 1 AREF pin). All other non-necessary pins will be NC's. I chose these interfaces because they will allow users of my controller board to start with analog joysticks and work their way up to connecting Serial controllers, and finally I2C controllers.

The main question I need to consider now is power. Single cell LIPO batteries only provide 3.75 volts when fully charged (and I don't know the low voltage). However, the LM1117 power transistor on the board requires at least a 4.8 V input. I either need to find a better power supply for 3.75 V, or find a different battery setup (9 volts would be sufficient)

By the end of this week I want to have the first version of the schematic developed (with the CC2592 RF Front end checked) and start playing with microcontroller communication this weekend.





Wednesday 10/15/2014

Today I took a detour and looked at Joysticks, when I got Joystick examples from Steve. Through a moderate amount of mucking around I found that the PS3/Xbox-like joysticks cannot be modified to act like throttle gimbals. The spring in this device works in all directions, as opposed to having two springs operating in two directions. 

However, I was sucessful when searching for RC controller parts, I so believe we can purchase joysticks like those available on an RC Controller.

This leads back to the overall controller design. I'm imagining two parts to the controller, the physical part, with Joysticks, buttons and potentiometers, and the PCB part, which has a 2x13 connector for the board. The physical controller (with joysticks and stuff) will be made out of acrylic and connected with regular wire to the PCB interface. This will allow us to cheaply play around with different types of controllers, and still allow the flexibility I was hoping for, such as the ability to read from existing controllers.

For now though, I see Ports D and E being used as digital inputs (16) and 6 pins from Port F being used as analog inputs for 22 total input pins. With 2 VDD and 2 Ground pins, we can use a 2x13 connector from sparkfun to create our board-controller interface.

I also spent some time today creating the schematic, and I finished connecting the antenna subsystems, with jumpers included. I still need to check the pads for the RF front end and add the new 2x13 controller.

Other notes:

DIG3 and DIG4 look like the dedicated pins to control the enables on the RF Front end, however, they are also analog inputs?
DIG1 and DIG2 may also be interesting, as is the AMR pin.


Thursday


Today I spent all of my day doing two thing: confirming the CC2592 footprint (and learning how to do pads in Eagle) and getting as close as I could to finishing the controller PCB Schematic. The schematic got more complicated with the inclusion of an LCD that communicates via I2C (I chose the NHD‐C0220BiZ‐FSW‐FBW‐3V3M). In the Digikey order I also asked for two sets of 10 inductors. 

I'm begining to worry that the rats nest will be too complicated for a two layer board. If this is the case, I don't know what to do (but It'll be exciting). 

I pland to spend some time on the rats nest tonight, and then do software testing this weekend. 


10/25/2014
- Finalized 2592 Footprint
- Created Gimbal footprint
- Investigated Gimbal Pinout
  From Top (Ridged Back, Left to Right), Black: GND, Red: Analog Out, White: VDD
  Range is not VDD to 0, it's more like .2 VDD to .8VDD (Varies per gimbal)
Friday/Weekenda
